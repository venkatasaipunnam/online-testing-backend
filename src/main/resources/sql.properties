#Login Queries
sql.login.getLoginDetailsByEmailId = SELECT u.user_id AS userId, u.email as emailId, l.password as password, l.temp_password as tempPassword, l.is_locked as isLocked, l.attempts as failedLoginAttempts, u.is_active as isActive, l.username as username FROM user_info u JOIN login_info l ON u.user_id = l.user_id WHERE u.email = :emailId;
sql.login.getLoginDetailsByUsername = SELECT u.user_id AS userId, u.email as emailId, l.password as password, l.temp_password as tempPassword, l.is_locked as isLocked, l.attempts as failedLoginAttempts, u.is_active as isActive, l.username as username FROM user_info u JOIN login_info l ON u.user_id = l.user_id WHERE l.username = :username;
sql.login.lockUserAccount = UPDATE login_info SET attempts = attempts + 1, is_locked = :locked WHERE user_id = :userId;
sql.login.updateFailedAttempts = UPDATE login_info SET attempts = attempts + 1 WHERE user_id = :userId;
sql.login.saveLastLogin = INSERT INTO last_login_info (user_id) VALUES(:userId);
sql.login.resetUserAttempts = UPDATE login_info SET temp_password = '', is_locked = false, attempts = 0 WHERE user_id = :userId;
sql.login.saveTempPassQuery = UPDATE login_info SET temp_password = :tempPassword, is_locked = false, attempts = 0 WHERE user_id = :userId;
sql.login.saveLoginDetails = INSERT INTO login_info (user_id, username, password) VALUES (:userId, :username, :password);
sql.login.savePasswordDetails = INSERT INTO password_info (user_id, password) VALUES (:userId, :password);
sql.login.getLoginDetails = SELECT u.user_id AS userId, u.email as emailId, l.password as password, l.temp_password as tempPassword, l.is_locked as isLocked, l.attempts as failedLoginAttempts, u.is_active as isActive, l.username as username FROM user_info u JOIN login_info l ON u.user_id = l.user_id WHERE u.user_id = :userId;
sql.login.saveUserPass = UPDATE login_info SET temp_password = '', password = :password WHERE user_id = :userId;

#User Queries
sql.user.getUserProfDetailsById = SELECT prof.user_id as userId, prof.email as emailId, prof.first_name as firstName, prof.last_name as lastName, prof.is_active as isActive, typ.name as userType, login.username as username, login.is_locked as isLocked FROM user_info prof, user_type typ, login_info login WHERE prof.user_id = :userId AND prof.user_type_id = typ.id AND prof.user_id = login.user_id;
sql.user.isUserExistsByEmail = SELECT COUNT(*) FROM user_info WHERE email = :emailId;
sql.user.getUserIdByEmail = SELECT user_id as userId FROM user_info WHERE email = :emailId;
sql.user.getUserFirstNameById = SELECT first_name FROM user_info WHERE user_id = :userId;
sql.user.saveUserProfDetails = INSERT INTO user_info (first_name, last_name, email, user_type_id) VALUES (:firstName, :lastName, :emailId, (select id from user_type where name = :type));
sql.user.updateUserDynamicFields = UPDATE user_info SET 

#Session Queries
sql.session.getSessionDetailsByUserId = SELECT session_id AS sessionId, user_id AS userId, start_time AS sessionStartTime, end_time AS sessionEndTime, extended_count AS extendCount FROM session_info WHERE user_id = :userId AND (start_time <= :currentTime AND end_time >= :currentTime) ORDER BY end_time DESC LIMIT 1;
sql.session.saveUserSession = INSERT INTO session_info (session_id, user_id, start_time, end_time) VALUES (UUID(), :userId, :currentTime, DATE_ADD(:currentTime, INTERVAL 180 MINUTE));
sql.session.isActiveUserSessionExists = SELECT count(*) FROM session_info WHERE user_id = :userId AND (start_time <= :currentTime AND end_time >= :currentTime);
sql.session.endUserSessionById = UPDATE session_info SET end_time = :currentTime WHERE session_id = :sessionId;
sql.session.updateUserSessionById = UPDATE session_info SET extended_count = extended_count + 1, end_time = DATE_ADD(end_time, INTERVAL 60 MINUTE) WHERE session_id = :sessionId;
sql.session.isSessionActive = SELECT count(*) FROM session_info WHERE session_id = :sessionId AND (start_time <= :currentTime AND end_time >= :currentTime);
sql.session.getSessionDetailsById = SELECT session_id AS sessionId, user_id AS userId, start_time AS sessionStartTime, end_time AS sessionEndTime, extended_count AS extendCount FROM session_info WHERE session_id = :sessionId;

# Admins
sql.admin.getAllUsers = SELECT up.user_id as userId, up.first_name as firstName, up.last_name as lastName, up.email as emailId, ut.name as userType, ld.is_locked as isLocked, up.is_active as isActive FROM user_info up, login_info ld, user_type ut WHERE up.user_id = ld.user_id AND up.user_type_id = ut.id;